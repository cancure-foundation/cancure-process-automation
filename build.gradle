buildscript {
    repositories {
    	mavenLocal()
    	mavenCentral()    	
    }

    dependencies {
       classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin : 'war'

sourceCompatibility = 1.7
targetCompatibility = 1.7

version = '1.0'
war {
    manifest {
        attributes 'Implementation-Title': 'Cancure Process Automation',
                   'Implementation-Version': version
    }
}

jacoco {
    toolVersion ="0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

repositories {
	mavenLocal()
	mavenCentral()
}


dependencies {

    compile("org.springframework.boot:spring-boot-starter-web:1.3.5.RELEASE")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.springframework.boot:spring-boot-starter-freemarker:1.3.5.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:1.3.5.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-security:1.3.5.RELEASE")
    compile("com.h2database:h2:1.4.185")
    compile("mysql:mysql-connector-java")
    compile("org.springframework.security.oauth:spring-security-oauth2:2.0.10.RELEASE")
    compile("org.activiti:activiti-spring-boot-starter-basic:5.21.0")
	compile("com.itextpdf:itextpdf:5.5.9")
	compile("org.apache.commons:commons-email:1.2")
	compile("com.itextpdf.tool:xmlworker:5.5.9")
	compile("org.apache.poi:poi:3.9")
	
	
    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

jacocoTestReport {
  group = "Reporting"
  reports {
    html.enabled = true
    xml.enabled = true
    html.destination = "${buildDir}/reports/coverage"
  }
  executionData = files('build/jacoco/test.exec')
}

test { 
	finalizedBy jacocoTestReport 
}

findbugs {
  ignoreFailures = true
  toolVersion = "3.0.1"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/findbugs")
  effort = "max" 
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
            'java-basic',
            'java-braces',  
            'java-empty',           
            'java-imports',
            //'java-optimizations',            
            'java-strings',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ] 
}

